//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Class-BedReader
// Class code for BedReader
// Copyright 2009 Gabor T. Marth, Boston College
// All rights reserved
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#ifndef CLASS_BEDREADER_CPP
#define CLASS_BEDREADER_CPP

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <map>
#include <iterator>
#include <algorithm>
#include <cmath>

using std::ios;
using std::ifstream;
using std::ofstream;
using std::ostream;
using std::istream;
using std::fstream;
using std::cin;
using std::cout;
using std::clog;
using std::endl;
using std::string;
using std::vector;
using std::deque;
using std::map;
using std::min;
using std::max;

#include "Class-BedReader.h"
#include "Function-Generic.h"

// "boost" regular expression library
#include <boost/regex.hpp>


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// BedReader object class utility routines
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// constants
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

// BED line pattern
boost::regex patternBED("^(\\S+)\\s+(\\d+)\\s+(\\d+)\\s*(.*)$");

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// static class-wide variable initializations
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// class methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
BedReader::BedReader(
		     string fn
		     ) 
  :bed(fn.c_str(), ifstream::in) {

  //----------------------------------------------------------------------------
  // assign file name
  //----------------------------------------------------------------------------
  fileName = fn;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// member methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// open
//------------------------------------------------------------------------------
bool BedReader::open(string fn) {

  //----------------------------------------------------------------------------
  // assign file name
  //----------------------------------------------------------------------------
  fileName = fn;

  //----------------------------------------------------------------------------
  // open file for reading if file name is not empty
  //----------------------------------------------------------------------------
  if (fileName != "") {
    bed.open(fileName.c_str(), ifstream::in);
  }

  //----------------------------------------------------------------------------
  // return FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return bed.is_open();
}

//------------------------------------------------------------------------------
// close
//------------------------------------------------------------------------------
bool BedReader::close() {

  //----------------------------------------------------------------------------
  // close file
  //----------------------------------------------------------------------------
  bed.close();

  //----------------------------------------------------------------------------
  // return ! FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return ! bed.is_open();
}

//------------------------------------------------------------------------------
// isOpen
//------------------------------------------------------------------------------
bool BedReader::isOpen() {
  
  //----------------------------------------------------------------------------
  // return FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return bed.is_open();
}

//------------------------------------------------------------------------------
// getNextEntry
//------------------------------------------------------------------------------
bool BedReader::getNextEntry(BedData & bd) {
  
  //----------------------------------------------------------------------------
  // if file is not open return false
  //----------------------------------------------------------------------------
  if (! bed.is_open()) {
    return false;
  }

  //----------------------------------------------------------------------------
  // read file line by line until BED line is found
  //----------------------------------------------------------------------------

  // regex match
  boost::smatch match;

  string line;
  while (getline(bed, line)) {

    // if BED line
    if (boost::regex_search(line, match, patternBED)) {

      // assign content
      bd.seq = match[1];
      bd.left = string2Int(match[2]);
      bd.right = string2Int(match[3]);
      bd.desc = match[4];

      // return true
      return true;
    }
  }

  //----------------------------------------------------------------------------
  // if no more lines to read return false
  //----------------------------------------------------------------------------
  return false;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// BedReader class methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#endif
