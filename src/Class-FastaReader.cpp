//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Class-FastaReader
// Class code for FastaReader
// Copyright 2009 Gabor T. Marth, Boston College
// All rights reserved
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#ifndef CLASS_FASTAREADER_CPP
#define CLASS_FASTAREADER_CPP

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <map>
#include <iterator>
#include <algorithm>
#include <cmath>

using std::ios;
using std::ifstream;
using std::ofstream;
using std::ostream;
using std::istream;
using std::fstream;
using std::cin;
using std::cout;
using std::clog;
using std::endl;
using std::string;
using std::vector;
using std::deque;
using std::map;
using std::min;
using std::max;

#include "Class-FastaReader.h"
#include "Function-Generic.h"

// "boost" regular expression library
#include <boost/regex.hpp>


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// BedReader object class utility routines
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// constants
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

// BED line pattern
boost::regex patternFastaHeader("^>\\s*(\\S+)\\s*(.*)$");

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// static class-wide variable initializations
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// class methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// constructor
//------------------------------------------------------------------------------
FastaReader::FastaReader(
		     string fn
		     ) 
  :fasta(fn.c_str(), ifstream::in) {

  //----------------------------------------------------------------------------
  // assign file name
  //----------------------------------------------------------------------------
  fileName = fn;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// member methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// open
//------------------------------------------------------------------------------
bool FastaReader::open(string fn) {

  //----------------------------------------------------------------------------
  // assign file name
  //----------------------------------------------------------------------------
  fileName = fn;

  //----------------------------------------------------------------------------
  // open file for reading if file name is not empty
  //----------------------------------------------------------------------------
  if (fileName != "") {
    fasta.open(fileName.c_str(), ifstream::in);
  }

  //----------------------------------------------------------------------------
  // return FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return fasta.is_open();
}

//------------------------------------------------------------------------------
// close
//------------------------------------------------------------------------------
bool FastaReader::close() {

  //----------------------------------------------------------------------------
  // close file
  //----------------------------------------------------------------------------
  fasta.close();

  //----------------------------------------------------------------------------
  // return ! FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return ! fasta.is_open();
}


//------------------------------------------------------------------------------
// initialize
//------------------------------------------------------------------------------
bool FastaReader::initialize() {

  //----------------------------------------------------------------------------
  // check if file is open
  //----------------------------------------------------------------------------
  if (! fasta.is_open()) {
    return false;
  }

  //----------------------------------------------------------------------------
  // read file line by line until FASTA header line is found
  //----------------------------------------------------------------------------

  // regex match
  boost::smatch match;

  // search for header line
  string line;
  name = "";
  header = "";
  while (getline(fasta, line)) {

    // if FASTA header line
    if (boost::regex_search(line, match, patternFastaHeader)) {
      name = match[1];
      header = line;
      std::cerr << "Initialize: header found... name=" << name << endl;
      break;
    }
  }

  if (name != "" && header != "") {
    return true;
  }
  else {
    return false;
  }
}

//------------------------------------------------------------------------------
// isOpen
//------------------------------------------------------------------------------
bool FastaReader::isOpen() {
  
  //----------------------------------------------------------------------------
  // return FILE_OPEN FLAG
  //----------------------------------------------------------------------------
  return fasta.is_open();
}

//------------------------------------------------------------------------------
// getNextEntry
//------------------------------------------------------------------------------
bool FastaReader::getNextEntry(FastaData & fd) {
  
  //----------------------------------------------------------------------------
  // if file is not open return false
  //----------------------------------------------------------------------------
  if (! fasta.is_open()) {
    return false;
  }

  //----------------------------------------------------------------------------
  // read file line by line until FASTA header line is found or file ends
  //----------------------------------------------------------------------------

  // regex match
  boost::smatch match;

  // search for header line
  string line;
  string sequence = "";
  string newName = "";
  string newHeader = "";
  while (getline(fasta, line)) {

    // if FASTA header line, assign name and header and return previous entry
    if (boost::regex_search(line, match, patternFastaHeader)) {
      newName = match[1];
      newHeader = line;
      break;
    }
    else {
      sequence += line;
    }
  }

  //----------------------------------------------------------------------------
  // assign content
  //----------------------------------------------------------------------------
  fd.name = name;
  fd.header = header;
  fd.sequence = sequence;
  
  //----------------------------------------------------------------------------
  // if name and header are non-empty return value true otherwise return false
  //----------------------------------------------------------------------------
  bool status = false;
  if (name != "" && header != "") {
    status = true;
  }

  //----------------------------------------------------------------------------
  // reassign name and header
  //----------------------------------------------------------------------------
  name = newName;
  header = newHeader;

  //----------------------------------------------------------------------------
  // return status
  //----------------------------------------------------------------------------
  return status;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// FastaReader class methods
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

#endif
